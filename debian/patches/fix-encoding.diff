Description: re-encode as UTF-8
Author: mirabilos <tg@debian.org>
Forwarded: https://mail.openjdk.org/pipermail/jdk8u-dev/2023-June/017213.html

--- a/jdk/src/share/classes/javax/swing/plaf/multi/doc-files/multi_tsc.html
+++ b/jdk/src/share/classes/javax/swing/plaf/multi/doc-files/multi_tsc.html
@@ -1,6 +1,7 @@
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
 <HTML>
 <HEAD>
+<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
 <TITLE>Using the Multiplexing Look and Feel</TITLE>
 </HEAD>
 
@@ -270,15 +271,15 @@ lets the previous UI object remove its l
 <blockquote>
                We recommended that you <i>don't</i> implement 
                 UI classes of an auxiliary look and feel as subclasses of the 
-                UI classes of a visual look and feel. Why not? Because they might 
+                UI classes of a visual look and feel.Â Why not? Because they might 
                 accidentally inherit code that installs listeners on a component 
-                object or renders the component on the display. As a result, 
+                object or renders the component on the display.Â As a result, 
                 your auxiliary look and feel would compete with the default look 
                 and feel rather than cooperating with it.<br>
                 <br>
                 Instead, we recommend that the UI classes of an auxiliary look 
                 and feel directly extend the abstract UI classes in the <code>javax.swing.plaf</code> 
-                package. By using this strategy, the developer of an auxiliary 
+                package.Â By using this strategy, the developer of an auxiliary 
                 look and feel can avoid competing with the default look and feel.
 </blockquote>
             <p> <font color="#000080"><b>Override all UI-specific methods
@@ -308,7 +309,7 @@ lets the previous UI object remove its l
 </a>
 
             <p>In many cases, you 
-              might want an auxiliary look and feel to be &quot;incomplete.&quot; That 
+              might want an auxiliary look and feel to be &quot;incomplete.&quot;Â That 
               is, you might not need to support the complete set 
               of components.
             For example, an auxiliary look and feel might choose 
@@ -331,35 +332,35 @@ lets the previous UI object remove its l
 	      </p>
             <p><code>public class MyAuxLookAndFeel 
               extends LookAndFeel {<br>
-                  ...<br>
-                  public UIDefaults getDefaults() {<br>
-                      <b>UIDefaults table = <br>
+              Â Â Â  ...<br>
+              Â Â Â  public UIDefaults getDefaults() {<br>
+              Â Â Â Â Â Â Â  <b>UIDefaults table = <br>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
               new MyAuxUIDefaults();<br>
-              </b>        Object[] uiDefaults = {<br>
-                        &quot;ButtonUI&quot;, &quot;MyAuxButtonUI&quot;,<br>
-                        ...<br>
-                      }<br>
-                      table.putDefaults(uiDefaults);<br>
-                      return table;<br>
-                  }<br>
+              </b>Â Â Â Â Â Â Â  Object[] uiDefaults = {<br>
+              Â Â Â Â Â Â Â Â Â  &quot;ButtonUI&quot;, &quot;MyAuxButtonUI&quot;,<br>
+              Â Â Â Â Â Â Â Â Â  ...<br>
+              Â Â Â Â Â Â Â  }<br>
+              Â Â Â Â Â Â Â  table.putDefaults(uiDefaults);<br>
+              Â Â Â Â Â Â Â  return table;<br>
+              Â Â Â  }<br>
               }<br>
               <br>
               <b>class MyAuxUIDefaults extends UIDefaults {<br>
-                  protected void getUIError(String msg) {<br>
-                      //System.err.println<br>
+              Â Â Â  protected void getUIError(String msg) {<br>
+              Â Â Â Â Â Â Â  //System.err.println<br>
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp; (&quot;An 
               annoying message!&quot;);<br>
-                  }<br>
+              Â Â Â  }<br>
               }</b></code></p>
 
 <p>
 In the preceding example, an auxiliary look and feel named <code>MyAux</code> 
               creates a <code>UIDefaults</code> subclass 
               that overrides the <code>getUIError</code> 
-              method. The <code>getUIError</code> 
+              method.Â The <code>getUIError</code> 
               method is the method that is invoked when Swing cannot find a UI 
-              object in a look and feel. By merely doing nothing in this method, 
+              object in a look and feel.Â By merely doing nothing in this method, 
               you can avoid the error message.</p>
             <p> 
 
@@ -370,10 +371,10 @@ In the preceding example, an auxiliary l
 
             <p>In 
               rare instances, a UI object from an auxiliary look and feel 
-              may be interested in the default UI object used by the component. In 
+              may be interested in the default UI object used by the component.Â In 
               these cases, the UI object from auxiliary look and feel can obtain 
               the UI from a component by calling its <code>getUI</code>
-              method. The returned UI is an instance of one of the multiplexing 
+              method.Â The returned UI is an instance of one of the multiplexing 
               look and feel UI classes (for example, <code>MultiButtonUI</code>). 
               The UI object from the auxiliary look and feel can call the <code>getUIs</code> 
               method of the returned object to obtain an array containing a complete list 
@@ -392,7 +393,7 @@ The Multiplexing look and feel
 (represented by
 <code>javax.swing.plaf.multi.MultiLookAndFeel</code>)
 is meant to be transparent to 
-all developers and users. It should &quot;just work&quot; -- and 
+all developers and users.Â It should &quot;just work&quot; -- and 
               it is used only when the user tells Swing to use an auxiliary look 
               and feel.</p>
 
@@ -474,7 +475,7 @@ and Feel</b></font>
             <p> To do that, all the user has to do is modify 
               the <code>$JDKHOME/lib/swing.properties</code> 
               file to include a definition of the <code>swing.plaf.multiplexinglaf</code> 
-              property. Swing then treats the <code>swing.plaf.multiplexinglaf</code> 
+              property.Â Swing then treats the <code>swing.plaf.multiplexinglaf</code> 
               property as a <code>LookAndFeel</code> 
               subclass that supports multiplexing.
 </p>
